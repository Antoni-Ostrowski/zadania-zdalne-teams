layout.js
import './globals.css'
import { Inter } from 'next/font/google'
import Menu from './Menu'

const inter = Inter({ subsets: ['latin'] })

export const metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default function RootLayout({ children }) {
  return (
    <html lang='en'>
      <body className={inter.className}>
        <Menu />
        {children}
      </body>
    </html>
  )
}

Menu.js
'use client'
import Link from 'next/link'
import React from 'react'

export default function Menu() {
  return (
    <div>
      <Link href={'/'}>Strona glowna</Link>
      <br />
      <Link href={'/zadanie1'}>Zadanie1</Link>
      <br />
      <Link href={'/zadanie2'}>Zadanie2</Link>
      <br />
      <Link href={'/zadanie3'}>Zadanie3</Link>
      <br />
      <Link href={'/zadanie4'}>Zadanie4</Link>
      <br />
      <Link href={'/zadanie5'}>Zadanie5</Link>
    </div>
  )
}


zadanie1 page.js
'use client'
import React, { useState } from 'react'

export default function page() {
  const [counter, setCounter] = useState(0)

  return (
    <div>
      <div>Counter: {counter}</div>
      <div>
        <button onClick={() => setCounter((prevCounter) => prevCounter + 1)}>add to counter</button>
      </div>
    </div>
  )
}


zadanie2 page.js
'use client'

import React, { useState, useEffect } from 'react'

export default function UpdateTitlePage() {
  const [number, setNumber] = useState('')

  useEffect(() => {
    document.title = `${number}`
  }, [number])

  return (
    <div>
      <h1>Podaj liczbę:</h1>
      <input type='number' value={number} onChange={(e) => setNumber(e.target.value)} placeholder='Wpisz liczbę' />
    </div>
  )
}


zadanie3 page.js
'use client'
import React, { useState } from 'react'

export default function page() {
  const [number, setNumber] = useState(2)
  return (
    <div>
      {number % 2 == 0 ? <h1>liczba jest parzysta</h1> : <h1>liczba jest nieparzysta</h1>}
      <input type='number' value={number} onChange={(e) => setNumber(e.target.value)} placeholder='Wpisz liczbę' />
    </div>
  )
}


zadanie4 page.js
'use client'
import React, { useEffect, useState } from 'react'

export default function page() {
  const [user, setUser] = useState({
    firstName: 'Jan',
    lastName: 'Kowalski',
    email: 'jan.kowalski@example.com',
    phone: '123-456-789',
  })
  const [firstName, setFirstName] = useState(user?.firstName)
  const [lastName, setLastName] = useState(user?.lastName)

  useEffect(() => {
    setFirstName(user?.firstName)
  }, [user?.firstName])

  useEffect(() => {
    setLastName(user?.lastName)
  }, [user?.lastName])

  function handleUserInfoChange(e) {
    setUser((prevUser) => ({ ...prevUser, [e.target.name]: e.target.value }))
  }

  return (
    <div>
      <h1>{JSON.stringify(user)}</h1>
      <h1>
        Imie: <input value={firstName} name='firstName' onChange={(e) => handleUserInfoChange(e)} />
      </h1>
      <h1>
        Imie: <input value={lastName} name='lastName' onChange={(e) => handleUserInfoChange(e)} />
      </h1>
    </div>
  )
}


zadanie5 page.js
'use client'
import React, { useEffect, useState } from 'react'

export default function page() {
  const [url, setUrl] = useState({
    urlName: '',
    pobierz: false,
  })
  const [loading, setLoading] = useState(false)
  const [MyError, setMyError] = useState(false)
  const [result, setResult] = useState(null)

  async function pobierz() {
    setLoading(true)
    console.log('pobierz')

    try {
      const response = await fetch(url.urlName)
      if (response.status !== 200) throw Error

      const data = await response.json()
      console.log(data)
      setUrl((prevUrl) => ({ ...prevUrl, pobierz: false }))
      setUrl((prevUrl) => ({ ...prevUrl, urlName: '' }))
      setResult(data)
    } catch (error) {
      setMyError(true)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    if (url.pobierz) pobierz()
  }, [url.pobierz])

  return (
    <div>
      {MyError && <h1>Wystapil blad</h1>}
      {loading && <h1>loading...</h1>}

      {!MyError && !loading && (
        <>
          <h1>Wyniki w konsoli</h1>
          <input
            value={url.urlName}
            name='url'
            onChange={(e) => setUrl((prevUrl) => ({ ...prevUrl, urlName: e.target.value }))}
            placeholder='url name'
          />
          <button onClick={() => setUrl((prevUrl) => ({ ...prevUrl, pobierz: true }))}>pobierz</button>
          <br />
        </>
      )}
    </div>
  )
}
